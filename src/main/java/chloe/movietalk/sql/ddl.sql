DROP TABLE IF EXISTS movie CASCADE;
DROP TABLE IF EXISTS director CASCADE;
DROP TABLE IF EXISTS actor CASCADE;
DROP TABLE IF EXISTS movie_actor CASCADE;
DROP TABLE IF EXISTS review CASCADE;
DROP TABLE IF EXISTS review_like CASCADE;
DROP TABLE IF EXISTS site_user CASCADE;

CREATE TABLE movie
(
    id BINARY(16) NOT NULL,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    code_fims VARCHAR(50) NOT NULL,
    title VARCHAR(255) NOT NULL,
    synopsis TEXT,
    release_date DATE,
    prod_year INTEGER,
    director_id BINARY(16),
    total_rating FLOAT(53),
    review_count INTEGER,
    PRIMARY KEY (id)
);

CREATE TABLE director
(
    id BINARY(16) NOT NULL,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    name VARCHAR(255) NOT NULL,
    gender ENUM ('FEMALE','MALE','OTHER'),
    country VARCHAR(50),
    PRIMARY KEY (id)
);

CREATE TABLE actor
(
    id BINARY(16) NOT NULL,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    name VARCHAR(255) NOT NULL,
    gender ENUM ('FEMALE','MALE','OTHER'),
    country VARCHAR(50),
    PRIMARY KEY (id)
);

CREATE TABLE movie_actor
(
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    movie_id BINARY(16),
    actor_id BINARY(16),
    PRIMARY KEY (id)
);

CREATE TABLE review
(
    id BINARY(16) NOT NULL,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    rating FLOAT,
    comment TEXT,
    movie_id BINARY(16),
    user_id BINARY(16),
    likes INTEGER,
    PRIMARY KEY (id)
);

CREATE TABLE review_like
(
    id BIGINT BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    user_id BINARY(16),
    review_id BINARY(16),
    PRIMARY KEY (id)
);

CREATE TABLE site_user
(
    id BINARY(16) NOT NULL,
    created_at TIMESTAMP(6),
    updated_at TIMESTAMP(6),
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    nickname VARCHAR(255) NOT NULL,
    role ENUM ('ADMIN','USER'),
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS movie ADD CONSTRAINT FK_MOVIE_DIRECTOR_ID FOREIGN KEY (director_id) REFERENCES director (id);
ALTER TABLE IF EXISTS movie_actor ADD CONSTRAINT FK_MOVIE_ACTOR_ACTOR_ID FOREIGN KEY (actor_id) REFERENCES actor (id);
ALTER TABLE IF EXISTS movie_actor ADD CONSTRAINT FK_MOVIE_ACTOR_MOVIE_ID FOREIGN KEY (movie_id) REFERENCES movie (id);
ALTER TABLE IF EXISTS review ADD CONSTRAINT FK_REVIEW_MOVIE_ID FOREIGN KEY (movie_id) REFERENCES movie (id);
ALTER TABLE IF EXISTS review ADD CONSTRAINT FK_REVIEW_USER_ID FOREIGN KEY (user_id) REFERENCES site_user (id);
ALTER TABLE IF EXISTS review_like ADD CONSTRAINT FK_REVIEW_LIKE_REVIEW_ID FOREIGN KEY (review_id) REFERENCES review (id);
ALTER TABLE IF EXISTS review_like ADD CONSTRAINT FK_REVIEW_LIKE_USER_ID FOREIGN KEY (user_id) REFERENCES site_user (id);
